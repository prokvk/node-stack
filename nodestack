#!/bin/bash

. $NODESTACK_PATH/.env
. $NODESTACK_PATH/config_functions.sh

function getNewContainerName() {
	X=1
	while [[ $(docker ps -a | grep "${NODESTACK_NODE_SERVER_CONTAINER}_${X}" | wc -l) != 0 ]]; do
		((X=$X+1))
	done
	echo "${NODESTACK_NODE_SERVER_CONTAINER}_${X}"
}

function getNewContainerPort() {
	PORT=8900
	while [[ $(docker ps -a | grep -- ":${PORT}->" | wc -l) != 0 ]]; do
		((PORT=$PORT+1))
	done
	echo $PORT
}

DIR=$(basename $PWD)
NAME=$(getNewContainerName)
PORT=$(getNewContainerPort)

case "$1" in
	create-project)	#create project - copy new-project template files
		ansible-playbook $NODESTACK_PATH/ansible/ns.yml --connection="local" --extra-vars "_pwd=$PWD _cmd=create_project _project_dir=$DIR" --tags "prep,action"
		;;
	init-project)	#init project - install node modules based on config
		ansible-playbook $NODESTACK_PATH/ansible/ns.yml --connection="local" --extra-vars \
			"_pwd=$PWD _cmd=init_project _project_dir=$DIR _container_name=$NAME _container_port=$PORT" --tags "prep,action"
		;;
	runs)	#run server
		ansible-playbook $NODESTACK_PATH/ansible/ns.yml --connection="local" --extra-vars "_pwd=$PWD _cmd=nginx _project_dir=$DIR" --tags "prep,tpl,action"

		trap "ansible-playbook $NODESTACK_PATH/ansible/stop_server.yml --connection=\"local\" --extra-vars \"_pwd=$PWD\"" SIGTERM SIGINT

		ansible-playbook $NODESTACK_PATH/ansible/ns.yml --connection="local" --extra-vars \
			"_pwd=$PWD _cmd=runs _project_dir=$DIR _container_name=$NAME _container_port=$PORT" --tags "prep,action"
		;;
	gendoc)	#generate swagger doc
		ansible-playbook $NODESTACK_PATH/ansible/ns.yml --connection="local" --extra-vars \
			"_pwd=$PWD _cmd=gendoc _project_dir=$DIR _container_name=$NAME _container_port=$PORT" --tags "prep,action"
		;;
	atest)	#run automated tests
		ansible-playbook $NODESTACK_PATH/ansible/ns.yml --connection="local" --extra-vars \
			"_pwd=$PWD _cmd=atest _project_dir=$DIR _container_name=$NAME _container_port=$PORT" --tags "prep,action"

		if [[ $([ -e atest_out ] && echo 1) -eq 1 ]]; then
			cat atest_out
			rm atest_out
		else
			cat atest_err
			rm atest_err
			exit 1
		fi
		;;
	install-test)	#test that nodestack has been installed correctly
		IMAGES=(ns_nginx ns_node_server)
		DIMAGES=$(docker images | awk '{print $1}')
		for ITEM in ${IMAGES[@]}; do
			if [[ $(inArray ${DIMAGES[@]} $ITEM) == 0 ]]; then
				echo "ERROR: image $ITEM NOT FOUND!" && exit 1
			fi
		done

		echo "Install test successful"
		;;
	npmi)	#npm install current project
		if [[ $2 != '' ]]; then
			ansible-playbook $NODESTACK_PATH/ansible/ns.yml --connection="local" --extra-vars \
				"_pwd=$PWD _cmd=npmi _project_dir=$DIR _container_name=$NAME _container_port=$PORT _node_modules=$2" --tags "prep,action"
		else
			ansible-playbook $NODESTACK_PATH/ansible/ns.yml --connection="local" --extra-vars \
				"_pwd=$PWD _cmd=npmi _project_dir=$DIR _container_name=$NAME _container_port=$PORT" --tags "prep,action"
		fi
		;;
	gcompile)	#grunt compile coffee current project
		ansible-playbook $NODESTACK_PATH/ansible/ns.yml --connection="local" --extra-vars \
			"_pwd=$PWD _cmd=gcompile _project_dir=$DIR _container_name=$NAME _container_port=$PORT" --tags "prep,action"
		;;
	printsshkey)	#print ns-node-server public SSH key
		docker run --rm -it --name ns_psk $NODESTACK_NODE_SERVER_CONTAINER cat /root/.ssh/id_rsa.pub
		;;
	deploy)	#deploy project
		ansible-playbook $NODESTACK_PATH/ansible/deploy.yml --connection="local" --extra-vars "_pwd=$PWD _project_dir=$DIR _cmd=deploy _remote=$2" --tags "prep,action"
		;;
	pull)	#pull & setup a nodestack project
		ansible-playbook $NODESTACK_PATH/ansible/ns.yml --connection="local" --extra-vars "_pwd=$PWD _project_dir=$DIR _cmd=pull _repo=$2" --tags "prep,action"
		;;
	*)	#default
		echo "ERROR: command NOT FOUND!" && exit 1
		;;
esac
